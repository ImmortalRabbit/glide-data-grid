name: Vercel Preview Deployment
on:
  pull_request:
    branches: ["main"]
    paths: ["packages/core/**", "packages/cells/**", "packages/source/**", ".storybook/**", "vercel.json"]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 📦
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0
          cache: 'npm'

      - name: Install dependencies 🔧
        run: npm install

      - name: Build Storybook 🏗️
        run: npm run build-storybook

      - name: Deploy to Vercel 🚀
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./

      - name: Comment PR with Preview URL 💬
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('📖 Storybook Preview')
            );

            const previewUrl = '${{ steps.vercel-deploy.outputs.preview-url }}';
            const commentBody = `## 📖 Storybook Preview

            🚀 **Preview URL**: ${previewUrl}

            This preview will be updated automatically when you push changes to this PR.

            ---
            *Preview powered by [Vercel](https://vercel.com)*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }